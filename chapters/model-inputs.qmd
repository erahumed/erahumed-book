# Model inputs {#sec-model-inputs}

This chapter serves as a central reference for all input parameters used in ERAHUMED simulations.

## Landscape parameters

Landscape parameters are collected in @tbl-landscape-params. In this table, a `numeric(n)` type indicates a numeric vector of `n` components, while `data.frame` inputs have more complex formats, detailed below.

```{r}
#| echo: false
#| label: tbl-landscape-params
#| tbl-cap: "ERAHUMED input parameters"

if (knitr::opts_knit$get("rmarkdown.pandoc.to") == "html") {
  render_fun <- function(x) {
    x <- dplyr::arrange(x, Group, Name)
    grps_rle <- rle(x$Group)
    pack_rows_idx <- grps_rle$lengths
    names(pack_rows_idx) <- grps_rle$values
    x <- dplyr::select(x, -Group)
    
    knitr::kable(x, format = "html", escape = FALSE) |> 
      kableExtra::pack_rows(index = pack_rows_idx)
    }
  } else {
  render_fun <- function(x) {
    knitr::kable(x, format = "latex")
    }
}

strip_roxy_macros <- function(x) 
  gsub("\\\\link(?:\\[[^]]+\\])?\\{([^}]+)\\}", "`\\1`", x = x)

wrap_bcktcks <- function(x) paste0("`", x, "`")

input_docs_df <- function() {
  docs <- erahumed:::erahumed_input_docs()

  res <- data.frame(Parameter = names(docs) |> 
                      wrap_bcktcks() |> gt::vec_fmt_markdown(),
                    Name = NA,
                    Unit = NA,
                    Group = NA,
                    Type = NA, 
                    Description = NA
                    )
  
  for (i in seq_along(docs)) {
    res[i, "Name"] <- (docs[[i]]$name %||% res[i, "Parameter"])
    res[i, "Unit"] <- (docs[[i]]$unit %||% "N/A")
    res[i, "Type"] <- docs[[i]]$type |> 
      wrap_bcktcks() |> gt::vec_fmt_markdown()
    res[i, "Group"] <- docs[[i]]$group
    res[i, "Description"] <- docs[[i]]$description |> 
      strip_roxy_macros() |> gt::vec_fmt_markdown()
      
  }
  
  return(res)
}

input_docs_df() |>
  render_fun()
```

## Chemical-specific parameters

In addition to landscape parameters, ERAHUMED includes a set of parameters for each supported chemical, defining their physico-chemical and toxicological properties. At this stage, these parameters are internal and not reported here. However, our roadmap includes future support for customizing these parameters and defining new chemicals.

## Data frame inputs

We detail in the following sections the format of data frame inputs.

```{r}
#| include: false
df_input_description <- function(name) {
  docs <- erahumed:::erahumed_input_docs(name)
  
  res <- list()
  
  res$caption <- paste0(docs$name, " [", docs$cardinality, "]")
  
  res$description <- strip_roxy_macros(docs$description)
  
  cls <- docs$columns
  res$table <- data.frame(Column = names(cls), Description = as.character(cls))
  
  return(res)
}
```

### Lake outflows and levels data frame {#sec-weather-df}

```{r}
#| include: false
outflows_df_desc <- df_input_description("outflows_df")
```

`r outflows_df_desc$description`

```{r}
#| echo: false
knitr::kable(outflows_df_desc$table, caption = outflows_df_desc$caption)
```

### Weather data frame

```{r}
#| include: false
weather_df_desc <- df_input_description("weather_df")
```

`r weather_df_desc$description`

```{r}
#| echo: false
knitr::kable(weather_df_desc$table, caption = weather_df_desc$caption)
```

### Rice paddy management data frame {#sec-management-df}

```{r}
#| include: false
management_df_desc <- df_input_description("management_df")
```

`r management_df_desc$description`

```{r}
#| echo: false
knitr::kable(management_df_desc$table, caption = management_df_desc$caption)
```

### Chemical application schedules data frame {#sec-ca-schedules-df}

```{r}
#| include: false
ca_schedules_df_desc <- df_input_description("ca_schedules_df")
```

`r ca_schedules_df_desc$description`

```{r}
#| echo: false
knitr::kable(ca_schedules_df_desc$table, caption = ca_schedules_df_desc$caption)
```
