# Model inputs {#sec-model-inputs}

This chapter will collect all model inputs (numeric parameters, as well as more complex information such as time-series or data-frames). The description should be generally succinct and parameters should be collected in a table - leveraging on `erahumed::erahumed_docs()` to retrieve parameters documentation).

The goal here is not to explain in detail what every parameter represents, which will be clarified when explaining the algorithms. Rather, the goal is to have a central reference for all users inputs.

The table could contain links to the sections describing the specific algorithms for which the parameters being described play a role.

---

Landscape parameters are collected in @tbl-landscape-params. In this table, 
`numeric(n)` type parameters indicate numeric vectors of `n` components, while 
`data.frame` inputs have more complex formats, discussed in detail below.

```{r}
#| echo: false
#| label: tbl-landscape-params
#| tbl-cap: "ERAHUMED input parameters"

if (knitr::opts_knit$get("rmarkdown.pandoc.to") == "html") {
  render_fun <- function(x) {
    x <- dplyr::arrange(x, Group, Name)
    grps_rle <- rle(x$Group)
    pack_rows_idx <- grps_rle$lengths
    names(pack_rows_idx) <- grps_rle$values
    x <- dplyr::select(x, -Group)
    
    knitr::kable(x, format = "html", escape = FALSE) |> 
      kableExtra::pack_rows(index = pack_rows_idx)
    }
  } else {
  render_fun <- function(x) {
    knitr::kable(x, format = "latex")
    }
}

docs_layers <- erahumed::erahumed_docs("layers") |>
  (\(.) .[c("inp", "hbl", "hbc", "hbd", "ca", "ctc", "rc", "rd", "rl")])()

strip_roxy_macros <- function(x) 
  gsub("\\\\link(?:\\[[^]]+\\])?\\{([^}]+)\\}", "`\\1`", x = x)

wrap_bcktcks <- function(x) paste0("`", x, "`")

extract_layers_parameters_df <- function(l) {
  params <- l$parameters
  
  if (length(params) == 0) {
    return(NULL)
  }

  res <- data.frame(Parameter = names(params) |> 
                      wrap_bcktcks() |> gt::vec_fmt_markdown(),
                    Name = NA,
                    Unit = NA,
                    Group = NA,
                    Type = NA, 
                    Description = NA
                    )
  
  for (i in seq_along(params)) {
    res[i, "Name"] <- (params[[i]]$name %||% res[i, "Parameter"])
    res[i, "Unit"] <- (params[[i]]$unit %||% "N/A")
    res[i, "Type"] <- params[[i]]$type |> 
      wrap_bcktcks() |> gt::vec_fmt_markdown()
    res[i, "Group"] <- params[[i]]$group
    res[i, "Description"] <- params[[i]]$description |> 
      strip_roxy_macros() |> gt::vec_fmt_markdown()
      
  }
  
  return(res)
}

lapply(docs_layers, extract_layers_parameters_df) |>
  Reduce(rbind, x = _) |>
  render_fun()
```

